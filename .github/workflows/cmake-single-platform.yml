# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: debug

jobs:
  build_on_windows:
    runs-on: windows-latest

    steps:
    - env:
        VCPKG_ROOT: C:\vcpkg

    - uses: actions/checkout@v4

    - name: Configure CMake
      # Configure CMake in a 'out' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake --preset x64-${{env.BUILD_TYPE}} -B ${{github.workspace}}/out

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/out --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/out
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
   
  build_on_linux:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - env:
        VCPKG_ROOT: /usr/local/share/vcpkg

    - uses: actions/checkout@v4

    - name: Prepare precondition
      run: |
       chmod +x Bootstrap.sh
       sudo ./Bootstrap.sh

    - name: Configure CMake
      # Configure CMake in a 'out' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake --preset linux-${{env.BUILD_TYPE}} -B ${{github.workspace}}/out

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/out --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/out
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

