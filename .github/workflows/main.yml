# ITNOA
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: Continues Integration

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: debug

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        cpp_compiler: [g++, cl]
        include:
          - os: windows-latest
            cpp_compiler: cl
            preset: x64-debug
            vcpkg_path: C:\vcpkg
          - os: ubuntu-latest
            cpp_compiler: g++
            preset: linux-debug
            vcpkg_path: /usr/local/share/vcpkg
        exclude:
          - os: windows-latest
            cpp_compiler: g++
          - os: ubuntu-latest
            cpp_compiler: cl
    env:
      VCPKG_ROOT: ${{ matrix.vcpkg_path }}

    steps:
    - uses: actions/checkout@v5

      # Prepration begin
    - name: Add msbuild to PATH
      if: startsWith(matrix.os, 'windows')
      uses: microsoft/setup-msbuild@v2

    - name: Set up Visual Studio shell
      if: startsWith(matrix.os, 'windows')
      uses: egor-tensin/vs-shell@v2
      with:
        arch: x64

    - name: Prepare precondition
      if: startsWith(matrix.os, 'ubuntu')
      run: |
       chmod +x Bootstrap.sh
       sudo ./Bootstrap.sh

    - name: Configure CMake
      # Configure CMake in a 'out' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake --preset ${{ matrix.preset }} -B ${{github.workspace}}/out

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/out --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/out
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}